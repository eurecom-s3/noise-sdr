/* -*- c++ -*- */
/*
 * Copyright 2019 Joachim Tapparel TCL@EPFL.
 *
 * This is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 *
 * Modified by Giovanni Camurati to make it a library for fldigi-noise-sdr
 *
 */

#ifndef _LORA_H
#define _LORA_H

#include <vector>
#include "modem.h"
//#include "complex.h"

#define MAX_PKT_SIZE 255
#define HEADER_SIZE 5
#define CRC_SIZE 4

const unsigned int whitening_seq[] = {
    0xFF, 0xFE, 0xFC, 0xF8, 0xF0, 0xE1, 0xC2, 0x85, 0x0B, 0x17, 0x2F, 0x5E,
    0xBC, 0x78, 0xF1, 0xE3, 0xC6, 0x8D, 0x1A, 0x34, 0x68, 0xD0, 0xA0, 0x40,
    0x80, 0x01, 0x02, 0x04, 0x08, 0x11, 0x23, 0x47, 0x8E, 0x1C, 0x38, 0x71,
    0xE2, 0xC4, 0x89, 0x12, 0x25, 0x4B, 0x97, 0x2E, 0x5C, 0xB8, 0x70, 0xE0,
    0xC0, 0x81, 0x03, 0x06, 0x0C, 0x19, 0x32, 0x64, 0xC9, 0x92, 0x24, 0x49,
    0x93, 0x26, 0x4D, 0x9B, 0x37, 0x6E, 0xDC, 0xB9, 0x72, 0xE4, 0xC8, 0x90,
    0x20, 0x41, 0x82, 0x05, 0x0A, 0x15, 0x2B, 0x56, 0xAD, 0x5B, 0xB6, 0x6D,
    0xDA, 0xB5, 0x6B, 0xD6, 0xAC, 0x59, 0xB2, 0x65, 0xCB, 0x96, 0x2C, 0x58,
    0xB0, 0x61, 0xC3, 0x87, 0x0F, 0x1F, 0x3E, 0x7D, 0xFB, 0xF6, 0xED, 0xDB,
    0xB7, 0x6F, 0xDE, 0xBD, 0x7A, 0xF5, 0xEB, 0xD7, 0xAE, 0x5D, 0xBA, 0x74,
    0xE8, 0xD1, 0xA2, 0x44, 0x88, 0x10, 0x21, 0x43, 0x86, 0x0D, 0x1B, 0x36,
    0x6C, 0xD8, 0xB1, 0x63, 0xC7, 0x8F, 0x1E, 0x3C, 0x79, 0xF3, 0xE7, 0xCE,
    0x9C, 0x39, 0x73, 0xE6, 0xCC, 0x98, 0x31, 0x62, 0xC5, 0x8B, 0x16, 0x2D,
    0x5A, 0xB4, 0x69, 0xD2, 0xA4, 0x48, 0x91, 0x22, 0x45, 0x8A, 0x14, 0x29,
    0x52, 0xA5, 0x4A, 0x95, 0x2A, 0x54, 0xA9, 0x53, 0xA7, 0x4E, 0x9D, 0x3B,
    0x77, 0xEE, 0xDD, 0xBB, 0x76, 0xEC, 0xD9, 0xB3, 0x67, 0xCF, 0x9E, 0x3D,
    0x7B, 0xF7, 0xEF, 0xDF, 0xBF, 0x7E, 0xFD, 0xFA, 0xF4, 0xE9, 0xD3, 0xA6,
    0x4C, 0x99, 0x33, 0x66, 0xCD, 0x9A, 0x35, 0x6A, 0xD4, 0xA8, 0x51, 0xA3,
    0x46, 0x8C, 0x18, 0x30, 0x60, 0xC1, 0x83, 0x07, 0x0E, 0x1D, 0x3A, 0x75,
    0xEA, 0xD5, 0xAA, 0x55, 0xAB, 0x57, 0xAF, 0x5F, 0xBE, 0x7C, 0xF9, 0xF2,
    0xE5, 0xCA, 0x94, 0x28, 0x50, 0xA1, 0x42, 0x84, 0x09, 0x13, 0x27, 0x4F,
    0x9F, 0x3F, 0x7F};

class lora : public modem {
private:
  int txstate;
  int payload_cnt;
  int len;
  int len_i;
  bool end;
  unsigned int payload[MAX_PKT_SIZE];
  unsigned int payload_w[2 * MAX_PKT_SIZE];
  int data[HEADER_SIZE + 2 * MAX_PKT_SIZE + CRC_SIZE];
  int data_i[8 * (HEADER_SIZE + 2 * MAX_PKT_SIZE + CRC_SIZE)];

  bool implicit_header;
  bool has_crc;
  bool simple;
  int sf;
  int cr;
  double bw;

  unsigned int number_of_bins;     ///< number of bin per loar symbol
  double symbols_per_second;       ///< lora symbols per second
  unsigned int samples_per_symbol; ///< samples per symbols(Works only for 2^sf)

  std::vector<double> upchirp;   ///< reference upchirp
  std::vector<double> downchirp; ///< reference downchirp
  std::vector<double> symbol;    ///< reference downchirp

  unsigned int n_up; ///< number of upchirps in the preamble
  uint32_t symb_cnt; ///< counter of the number of lora symbols sent

  void simple_enc();
  void whithen();
  void add_header();
  void compute_header(int *data);
  unsigned int crc16(unsigned int crcValue, unsigned char newByte);
  void add_crc();
  void hamming_enc();
  void interleave();
  void gray_enc();
  double get_phase(unsigned int i, unsigned int id);
  inline void build_ref_chirps(double *upchirp, double *downchirp);
  inline void build_upchirp(double *upchirp, uint32_t id);
  void modulate();

public:
  enum {
    TX_STATE_GET_PAYLOAD,
    TX_STATE_PROCESS_PKT,
    TX_STATE_END,
  };

  lora(int loramode);
  ~lora();
        void init();
	void rx_init();
	void tx_init();
	void restart();
	int rx_process(const short *, int );
	int tx_process();
};

#endif
