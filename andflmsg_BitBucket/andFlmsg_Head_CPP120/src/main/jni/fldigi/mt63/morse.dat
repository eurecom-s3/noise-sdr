// computer readable Morse code table
//
// For a given character you should pick up a 31-bit code from the table.
// Bits should be taken starting from the LSB.
// Bit equal 1 means carrier ON, bit 0 means carrier off
// Each code includes one quiet dot at the start and two at the end.
// The code should be read until the last '1',
// but this last '1' must not be transmitted
//
const int MorseTableSize=128;
long MorseTable[MorseTableSize] = {
 0x00000004L , // 0x00
 0x00000004L , // 0x01
 0x00000004L , // 0x02
 0x00000004L , // 0x03
 0x00000004L , // 0x04
 0x00000004L , // 0x05
 0x00000004L , // 0x06
 0x00000004L , // 0x07
 0x00000004L , // 0x08
 0x00000004L , // 0x09
 0x00000004L , // 0x0A
 0x00000004L , // 0x0B
 0x00000004L , // 0x0C
 0x00000004L , // 0x0D
 0x00000004L , // 0x0E
 0x00000004L , // 0x0F
 0x00000004L , // 0x10
 0x00000004L , // 0x11
 0x00000004L , // 0x12
 0x00000004L , // 0x13
 0x00000004L , // 0x14
 0x00000004L , // 0x15
 0x00000004L , // 0x16
 0x00000004L , // 0x17
 0x00000004L , // 0x18
 0x00000004L , // 0x19
 0x00000004L , // 0x1A
 0x00000004L , // 0x1B
 0x00000004L , // 0x1C
 0x00000004L , // 0x1D
 0x00000004L , // 0x1E
 0x00000004L , // 0x1F
 0x00000004L , // 0x20 = ' '
 0x00000004L , // 0x21 = '!'
 0x00000004L , // 0x22 = '"'
 0x00000004L , // 0x23 = '#'
 0x0013ABAAL , // 0x24 = '$'
 0x00000004L , // 0x25 = '%'
 0x00000004L , // 0x26 = '&'
 0x004BBBBAL , // 0x27 = '''
 0x0004BBAEL , // 0x28 = '('
 0x004EBBAEL , // 0x29 = ')'
 0x0004BABAL , // 0x2A = '*'
 0x00012EBAL , // 0x2B = '+'
 0x004EEAEEL , // 0x2C = ','
 0x0004EAAEL , // 0x2D = '-'
 0x0013AEBAL , // 0x2E = '.'
 0x00012EAEL , // 0x2F = '/'
 0x004EEEEEL , // 0x30 = '0'
 0x0013BBBAL , // 0x31 = '1'
 0x0004EEEAL , // 0x32 = '2'
 0x00013BAAL , // 0x33 = '3'
 0x00004EAAL , // 0x34 = '4'
 0x000012AAL , // 0x35 = '5'
 0x00004AAEL , // 0x36 = '6'
 0x00012AEEL , // 0x37 = '7'
 0x0004AEEEL , // 0x38 = '8'
 0x0012EEEEL , // 0x39 = '9'
 0x0012AEEEL , // 0x3A = ':'
 0x0012EBAEL , // 0x3B = ';'
 0x00000004L , // 0x3C = '<'
 0x00013AAEL , // 0x3D = '='
 0x00000004L , // 0x3E = '>'
 0x0004AEEAL , // 0x3F = '?'
 0x00000004L , // 0x40 = '@'
 0x0000013AL , // 0x41 = 'A'
 0x000012AEL , // 0x42 = 'B'
 0x00004BAEL , // 0x43 = 'C'
 0x000004AEL , // 0x44 = 'D'
 0x00000012L , // 0x45 = 'E'
 0x000012EAL , // 0x46 = 'F'
 0x000012EEL , // 0x47 = 'G'
 0x000004AAL , // 0x48 = 'H'
 0x0000004AL , // 0x49 = 'I'
 0x00013BBAL , // 0x4A = 'J'
 0x000013AEL , // 0x4B = 'K'
 0x000012BAL , // 0x4C = 'L'
 0x000004EEL , // 0x4D = 'M'
 0x0000012EL , // 0x4E = 'N'
 0x00004EEEL , // 0x4F = 'O'
 0x00004BBAL , // 0x50 = 'P'
 0x00013AEEL , // 0x51 = 'Q'
 0x000004BAL , // 0x52 = 'R'
 0x0000012AL , // 0x53 = 'S'
 0x0000004EL , // 0x54 = 'T'
 0x000004EAL , // 0x55 = 'U'
 0x000013AAL , // 0x56 = 'V'
 0x000013BAL , // 0x57 = 'W'
 0x00004EAEL , // 0x58 = 'X'
 0x00013BAEL , // 0x59 = 'Y'
 0x00004AEEL , // 0x5A = 'Z'
 0x00000004L , // 0x5B = '['
 0x00000004L , // 0x5C = '\'
 0x00000004L , // 0x5D = ']'
 0x00000004L , // 0x5E = '^'
 0x0013AEEAL , // 0x5F = '_'
 0x00000004L , // 0x60 = '`'
 0x0000013AL , // 0x61 = 'a'
 0x000012AEL , // 0x62 = 'b'
 0x00004BAEL , // 0x63 = 'c'
 0x000004AEL , // 0x64 = 'd'
 0x00000012L , // 0x65 = 'e'
 0x000012EAL , // 0x66 = 'f'
 0x000012EEL , // 0x67 = 'g'
 0x000004AAL , // 0x68 = 'h'
 0x0000004AL , // 0x69 = 'i'
 0x00013BBAL , // 0x6A = 'j'
 0x000013AEL , // 0x6B = 'k'
 0x000012BAL , // 0x6C = 'l'
 0x000004EEL , // 0x6D = 'm'
 0x0000012EL , // 0x6E = 'n'
 0x00004EEEL , // 0x6F = 'o'
 0x00004BBAL , // 0x70 = 'p'
 0x00013AEEL , // 0x71 = 'q'
 0x000004BAL , // 0x72 = 'r'
 0x0000012AL , // 0x73 = 's'
 0x0000004EL , // 0x74 = 't'
 0x000004EAL , // 0x75 = 'u'
 0x000013AAL , // 0x76 = 'v'
 0x000013BAL , // 0x77 = 'w'
 0x00004EAEL , // 0x78 = 'x'
 0x00013BAEL , // 0x79 = 'y'
 0x00004AEEL , // 0x7A = 'z'
 0x00000004L , // 0x7B = '{'
 0x00000004L , // 0x7C = '|'
 0x00000004L , // 0x7D = '}'
 0x00000004L , // 0x7E = '~'
 0x00000004L   // 0x7F = ''
} ;
